Y <- cbind(1,1,2,1,2,-1)
View(Y)
Y <- cbind(c(1,1,2,1,2,-1),ncols=3)
View(Y)
Y <- cbind(c(1, 2, 2), c(1, 1, -1))
View(Y)
Y <- rbind(c(1, 2, 2), c(1, 1, -1))
View(Y)
Y <- matrix(c(1, 2, 2, 1, 1, -1), ncol = 3)
View(Y)
View(Y)
Y <- matrix(c(1, 1,2,1,2,-1), ncol = 3)
View(Y)
Z <- Y%*%t(Y)
View(Z)
Z <- crossprod(Y)
Z <- t(Y)%*%Y
View(Z)
det(Z)
eps <- 10^-8
bool.inv <- abs(det(Z)) > eps
bool.inv
Z.eigen <- eigen(Z)
Z.eigen
# Mit einfachen eckigen Klammern
L <- list(Eigenwerte = Z.eigen["values"], Invertierbar = bool.inv)
L
L$Eigenwerte
is.list(L$Eigenwerte)  # Liste!
# Bestimme zunächst für jedes Element, ob es logisch ist
# Mit lapply() statt sapply() funktioniert es nicht ganz.
bool.log <- sapply(L, is.logical)
bool.log
# Variante 1: Beachte, dass wir hier ein "!" brauchen!
L[!bool.log] <- NULL   # Lösche nicht numerische Elemente
L
# Anzahl der Spieler
m <- 4
# Karten erstellen, mischen
# und verteilen
karten <- rep(1:6, times = 4)
stapel <- sample(karten)
K <- matrix(stapel, ncol = m)
colnames(K) <- paste0("Spieler", 1:m)
View(K)
colSums(K <= 3)
View(K)
K1 <- apply(K, 2, sort, decreasing = FALSE)
K1
tab <- table(K[, "Spieler2"])
tab
tab.neu <- rep(0, 6)
names(tab.neu) <- 1:6
tab.neu
tab.neu[names(tab)] <- tab
tab.neu
n <- 4
k <- 5
# Würfle n * k Mal. NA-Werte markieren ungültige Würfelwürfe.
x <- sample(c(1:6, NA), size = n * k, TRUE)
x
W <- rbind(x, ncols = k)
View(W)
n <- 4
k <- 5
# Würfle n * k Mal. NA-Werte markieren ungültige Würfelwürfe.
x <- sample(c(1:6, NA), size = n * k, TRUE)
x
W <- rbind(x, ncols = k)
W <- matrix(x, ncols = k)
?rbind
W <- matrix(x, ncol = k, byrow = TRUE)
View(W)
colnames(W) <- (paste0("Wurf",1:k))
View(W)
rownames(W) <- (paste0("Wurf",1:k))
View(W)
W <- matrix(x, ncol = k, byrow = TRUE)
View(W)
rownames(W) <- (paste0("Wurf",1:k))
rownames(W) <- (paste0("Wurf",1:n))
View(W)
W.max <- apply(W, 1, max, na.rm = TRUE)
W.max
temp <- sample(1:6, size = sum(is.na(W)), replace = TRUE)
W[is.na(W)] <- temp
W
anz6 <- rowSums(W == 6)
anz6
W6 <- W[anz6 >= 2, , drop = FALSE]
W6
is.matrix(W6)
# Würfle n * k Mal. NA-Werte markieren ungültige Würfelwürfe.
x <- sample(c(1:6, NA), size = n * k, TRUE)
x
W <- matrix(x, ncol = k, byrow = TRUE)
rownames(W) <- (paste0("Wurf",1:n))
W.max <- apply(W, 1, max, na.rm = TRUE)
W.max
temp <- sample(1:6, size = sum(is.na(W)), replace = TRUE)
W[is.na(W)] <- temp
W
anz6 <- rowSums(W == 6)
anz6
W6 <- W[anz6 >= 2, , drop = FALSE]
W6
is.matrix(W6)
liste <- apply(W, 1, unique)
W[order(anz6, decreasing = TRUE), ]
tab <- table(sapply(liste, length))
tab
liste <- apply(W, 1, unique)
tab <- table(sapply(liste, length))
tab
liste
liste
tab <- table(sapply(liste, length))
tab
tab <- table(lengths(liste))
tab
liste
rm(list=ls())
setwd("C:/Users/anna.zoechner/OneDrive - Bundesforschungszentrum fuer Wald/Dokumente/GitHub/Analysis_within_sepcies/Laevigata")
setwd("C:/Users/anna.zoechner/OneDrive - Bundesforschungszentrum fuer Wald/Dokumente/GitHub/Analysis_within_species/Laevigata")
setwd("C:/Users/anna.zoechner/OneDrive - Bundesforschungszentrum fuer Wald/Dokumente/GitHub/CrataegusAnalysis/Analysis_within_species/Laevigata")
# Read in table with morphometric data
crataegus_morph <- read.csv("RearrangedTable.csv", na="NA")
View(crataegus_morph)
View(crataegus_morph)
# Read in table with morphometric data
crataegus_morph <- read.csv("RearrangedTable_samp_names.csv", na="NA")
View(crataegus_morph)
# Read in table with morphometric data
crataegus_morph <- read.csv("RearrangedTable_samp_names.csv", na="NA")
# Read in table with ploidy data
crataegus_ploidy <- read.csv("Ploidy_Crataegus.csv", na="NA", sep=";", header = FALSE)
colnames(crataegus_ploidy) = c("samp_name","place","ploidy") # give dataframe header
crataegus_ploidy$ploidy = substr(crataegus_ploidy$ploidy,1,nchar(crataegus_ploidy$ploidy)-1) # deleting x after ploidy level
crataegus_ploidy[, c(3)] <- sapply(crataegus_ploidy[, c(3)], as.numeric) # convert ploidy to numeric
# Dataframe combining morphometric and ploidy data
df = merge(crataegus_morph, crataegus_ploidy)
# Creating subset with data of Laevigata, Monogyna, Rhipidophylla
df_sub <- subset(df, samp_target == "3" | samp_target == "4" | samp_target == "5")
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,11)]
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df)
View(crataegus_ploidy)
View(crataegus_morph)
View(df_sub)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,11)]
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df_sub)
View(crataegus_ploidy)
View(df_sub)
# Read in table with morphometric data
crataegus_morph <- read.csv("RearrangedTable_completeTable.csv", na="NA")
View(crataegus_morph)
# Read in table with morphometric data
crataegus_morph <- read.csv("RearrangedTable_completeTable.csv", na="NA")
# Read in table with morphometric data
crataegus_morph <- read.csv("Rearranged_completeTable.csv", na="NA")
View(crataegus_morph)
View(df_sub)
# Read in table with morphometric data
crataegus_morph <- read.csv("Rearranged_completeTable.csv", na="NA")
# Read in table with ploidy data
crataegus_ploidy <- read.csv("Ploidy_Crataegus.csv", na="NA", sep=";", header = FALSE)
colnames(crataegus_ploidy) = c("samp_name","place","ploidy") # give dataframe header
crataegus_ploidy$ploidy = substr(crataegus_ploidy$ploidy,1,nchar(crataegus_ploidy$ploidy)-1) # deleting x after ploidy level
crataegus_ploidy[, c(3)] <- sapply(crataegus_ploidy[, c(3)], as.numeric) # convert ploidy to numeric
# Dataframe combining morphometric and ploidy data
df = merge(crataegus_morph, crataegus_ploidy)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,11)]
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df_sub)
View(df)
# Exclude data about sepals
df_sub <- df_sub[-c(9,10,11)]
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df_sub)
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,10)]
View(df_sub)
# Dataframe combining morphometric and ploidy data
df = merge(crataegus_morph, crataegus_ploidy)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
View(df)
View(df_sub)
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,10)]
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df_sub)
# Exclude data about sepals
df_sub <- df_sub[-c(8,9,10)]
View(df_sub)
View(df)
# Exclude data about sepals
df_sub <- df_sub[-c(9,10,12)]
View(df_sub)
# Dataframe combining morphometric and ploidy data
df = merge(crataegus_morph, crataegus_ploidy)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
View(df_sub)
# Exclude data about sepals
df_sub = subset(df, select = -c(9,10,12) )
View(df_sub)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
# Exclude data about sepals
df_sub = subset(df, select = -c(9,10,12) )
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
# Exclude data about sepals
df_sub = subset(df, select = -c(9,10,12) )
# Dataframe combining morphometric and ploidy data
df = merge(crataegus_morph, crataegus_ploidy)
# Creating subset with data of Laevigata
df_sub <- subset(df, samp_target == "3")
# Exclude data about sepals
df_sub = subset(df_sub, select = -c(9,10,12) )
df_sub <- df_sub[complete.cases(df_sub), ] # deletes NAs
View(df)
View(df_sub)
View(df_sub)
# Create dataframes for each feature
disk_radius = df_sub[4]
View(disk_radius)
tot_radius = df_sub[5]
fr_length = df_sub[6]
fr_width = df_sub[7]
fr_pos = df_sub[8]
styles = df_sub[9]
ploidy = df_sub[10]
# Summary for each column (feature)
summary(df)
# Boxplot
par(mar=c(7,5,1,1)) # more space to labels
boxplot(df_sub[-c(1)],las=2)
# Boxplot
par(mar=c(7,5,1,1)) # more space to labels
boxplot(df_sub[-c(1,2,3)],las=2)
# distribution of the values for each attribute and each population
df_sub_zero <- subset(df_sub, pop_numbers == "0")
View(df_sub_zero)
df_sub_one <- subset(df_sub, pop_numbers == "1")
df_sub_two <- subset(df_sub, pop_numbers == "2")
df_sub_five <- subset(df_sub, pop_numbers == "5")
df_sub_eight <- subset(df_sub, pop_numbers == "8")
View(df_sub_eight)
View(df_sub_zero)
boxplot(df_sub_zero[,4:10], main="Laevigata",ylim = c(0,14),las=2)
boxplot(df_sub_zero[,4:10], main="Population 0",ylim = c(0,14),las=2)
boxplot(df_sub_zero[,4:10], main="Population 0",ylim = c(0,14),las=2)
boxplot(df_sub_one[,4:10], main="Population 1",ylim = c(0,14),las=2)
boxplot(df_sub_two[,4:10], main="Population 2",ylim = c(0,14),las=2)
boxplot(df_sub_five[,4:10], main="Population 5",ylim = c(0,14),las=2)
boxplot(df_sub_eight[,4:10], main="Population 8",ylim = c(0,14),las=2)
par(mfrow=c(1,5))
hist(df_sub_zero$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_one$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_two$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_five$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_eight$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_zero$tot_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_one$tot_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_two$tot_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_five$tot_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_eight$tot_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_zero$fr_length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_one$fr_length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_two$fr_length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_five$fr_length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_eight$fr_length,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_zero$fr_length,breaks=seq(0,8,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_zero$fr_length,breaks=seq(0,14,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_one$fr_length,breaks=seq(0,14,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_two$fr_length,breaks=seq(0,14,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_five$fr_length,breaks=seq(0,14,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_eight$fr_length,breaks=seq(0,14,l=17),xlim=(0,14),ylim=c(0,150))
hist(df_sub_eight$fr_length,breaks=seq(0,14,l=17),xlim=c(0,14),ylim=c(0,150))
hist(df_sub_zero$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,50))
hist(df_sub_one$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,50))
hist(df_sub_zero$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_one$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_two$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_five$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_zero$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_one$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_two$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_five$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_zero$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_one$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_two$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_five$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_eight$disk_radius,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,70))
hist(df_sub_zero$fr_width,breaks=seq(0,12,l=17),xlim=c(0,12),ylim=c(0,70))
hist(df_sub_one$fr_width,breaks=seq(0,12,l=17),xlim=c(0,12),ylim=c(0,70))
hist(df_sub_two$fr_width,breaks=seq(0,12,l=17),xlim=c(0,12),ylim=c(0,70))
hist(df_sub_five$fr_width,breaks=seq(0,12,l=17),xlim=c(0,12),ylim=c(0,70))
hist(df_sub_eight$fr_width,breaks=seq(0,12,l=17),xlim=c(0,12),ylim=c(0,70))
hist(df_sub_zero$fr_pos,breaks=seq(0,10,l=17),xlim=c(0,10),ylim=c(0,150))
hist(df_sub_one$fr_pos,breaks=seq(0,10,l=17),xlim=c(0,10),ylim=c(0,150))
hist(df_sub_two$fr_pos,breaks=seq(0,10,l=17),xlim=c(0,10),ylim=c(0,150))
hist(df_sub_five$fr_pos,breaks=seq(0,10,l=17),xlim=c(0,10),ylim=c(0,150))
hist(df_sub_eight$fr_pos,breaks=seq(0,10,l=17),xlim=c(0,10),ylim=c(0,150))
hist(df_sub_zero$styles,breaks=seq(0,4,l=17),xlim=c(0,4),ylim=c(0,150))
hist(df_sub_one$styles,breaks=seq(0,4,l=17),xlim=c(0,4),ylim=c(0,150))
hist(df_sub_two$styles,breaks=seq(0,4,l=17),xlim=c(0,4),ylim=c(0,150))
hist(df_sub_five$styles,breaks=seq(0,4,l=17),xlim=c(0,4),ylim=c(0,150))
hist(df_sub_eight$styles,breaks=seq(0,4,l=17),xlim=c(0,4),ylim=c(0,150))
hist(df_sub_zero$ploidy,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_one$ploidy,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_two$ploidy,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_five$ploidy,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
hist(df_sub_eight$ploidy,breaks=seq(0,8,l=17),xlim=c(0,8),ylim=c(0,150))
summary(df_sub_zero)
means_zero <- apply(df_sub_zero,2,summary)
View(means_zero)
means_zero <- apply(df_sub_zero,2,summary(df_sub_zero))
means_zero <- apply(df_sub_zero,2,mean)
summary(df_sub_zero)
summary(df_sub_one)
summary(df_sub_two)
summary(df_sub_five)
summary(df_sub_eight)
par(mfrow=c(1,5))
boxplot(df_sub_zero[,4:10], main="Population 0",ylim = c(0,14),las=2)
boxplot(df_sub_one[,4:10], main="Population 1",ylim = c(0,14),las=2)
boxplot(df_sub_two[,4:10], main="Population 2",ylim = c(0,14),las=2)
boxplot(df_sub_five[,4:10], main="Population 5",ylim = c(0,14),las=2)
boxplot(df_sub_eight[,4:10], main="Population 8",ylim = c(0,14),las=2)
